@using System.Text.Json
@using System.Collections.Generic

@using MyApp.ViewModels
@model ReviewCreateViewModel

@{
    ViewData["Title"] = "Create Review";
}

<h1 class="mb-3">@ViewData["Title"]</h1>

<partial name="~/Views/Shared/_PharmacistNav.cshtml" />

<form asp-action="Reviews" asp-asp-controller="Pharmacist" method="post" target="_blank">
    @Html.AntiForgeryToken()

    <fieldset id="medAdviceFieldset" class="mt-4 mb-4 p-4 border rounded ">

        <div class="row g-3 align-items-end">
            <div class="col-md-4">
                <label for="medicineName" class="form-label">Medicine name</label>
                <input type="text" id="medicineName" class="form-control" />
            </div>
            <div class="col-md-6">
                <label for="medicineAdvice" class="form-label">Advice / instructions</label>
                <input type="text" id="medicineAdvice" class="form-control" />
            </div>
            <div class="col-md-2 d-grid">
                <button type="button" id="addMedAdviceBtn" class="btn btn-primary">Add</button>
            </div>
        </div>

        <div id="medAdviceList" class="mt-4"></div>

        <input type="hidden" id="medAdviceHidden" name="Advice" value="" />
    </fieldset>
      


    <button type="submit" class="btn btn-primary">Generate PDF</button>
    <button type="button" class="btn btn-secondary" id="clearBtn">Delete All</button>
    <p class="text-muted mt-2">
        The PDF will open in a new tab.
    </p>
</form>

@section Scripts {
    <script>
        (function () {
            // ---- 1) Dictionary from server (with a fallback so 2QDS works even if ViewBag is empty) ----
            const serverMap = @Html.Raw(
                            JsonSerializer.Serialize(
                                    ViewBag.InstructionMap ?? new Dictionary<string, string>()
                            )
                    );
        const fallbackMap = {
            "1OD":  "Take one once a day",
            "1BD":  "Take one twice a day",
            "2TDS": "Take two three times a day",
            "2QDS": "Take two four times a day",
            "PRN":  "Take as needed"
        };
        const instructionMap = (serverMap && Object.keys(serverMap).length) ? serverMap : fallbackMap;
        console.debug("[InstructionMap]", instructionMap);

            // ---- 2) Grab elements ----
            const maxPairs = 5;
            const nameInput  = document.getElementById('medicineName');
            const adviceInput = document.getElementById('medicineAdvice');
            const addBtn     = document.getElementById('addMedAdviceBtn');
            const list       = document.getElementById('medAdviceList');
            const hidden     = document.getElementById('medAdviceHidden');
            const clearBtn   = document.getElementById('clearBtn');

            let pairs = []; // { name, advice }

            // ---- 3) Expansion helpers ----
            function expandShorthand(text) {
                if (!text) return text;
                const key = text.trim().toUpperCase();
                if (instructionMap && Object.prototype.hasOwnProperty.call(instructionMap, key)) {
                    return instructionMap[key];
                }
                return text;
            }

            // Expand live if the field contains a single token (no spaces)
            function maybeLiveExpand() {
                const v = adviceInput.value.trim();
                if (v && !/\s/.test(v)) {
                    const expanded = expandShorthand(v);
                    if (expanded !== v) adviceInput.value = expanded;
                }
            }

            // ---- 4) Render list + hidden field ----
            function render() {
                list.innerHTML = '';
                if (pairs.length === 0) {
                    list.innerHTML = '<div class="text-muted">No items added yet.</div>';
                } else {
                    const ul = document.createElement('ul');
                    ul.className = 'list-group';
                    pairs.forEach((p, idx) => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-start';
                        li.innerHTML = `<div><strong>${escapeHtml(p.name)}</strong>: ${escapeHtml(p.advice)}</div>`;
                        const btn = document.createElement('button');
                        btn.type = 'button';
                        btn.className = 'btn btn-sm btn-outline-danger';
                        btn.textContent = 'Remove';
                        btn.addEventListener('click', () => { pairs.splice(idx, 1); render(); });
                        li.appendChild(btn);
                        ul.appendChild(li);
                    });
                    list.appendChild(ul);
                }
                hidden.value = pairs.map(p => `${p.name} – ${p.advice}`).join('\n');
                addBtn.disabled = pairs.length >= maxPairs;
            }

            function escapeHtml(str) {
                return String(str)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;');
            }

            // ---- 5) Add pair (with expansion) ----
            function addPair() {
                const name = (nameInput?.value || '').trim();
                let advice = (adviceInput?.value || '').trim();
                if (!name || !advice) {
                    if (!name) nameInput?.focus(); else adviceInput?.focus();
                    return;
                }
                if (pairs.length >= maxPairs) return;

                advice = expandShorthand(advice); // ensure expansion before storing
                pairs.push({ name, advice });
                nameInput.value = '';
                adviceInput.value = '';
                nameInput.focus();
                render();
            }

            // ---- 6) Events ----
            addBtn?.addEventListener('click', addPair);

            adviceInput?.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    adviceInput.value = expandShorthand(adviceInput.value);
                    addPair();
                }
            });

            adviceInput?.addEventListener('blur', () => {
                adviceInput.value = expandShorthand(adviceInput.value);
            });

            adviceInput?.addEventListener('input', () => {
                // live expansion for single-token codes like "2QDS"
                maybeLiveExpand();
            });

            nameInput?.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') { e.preventDefault(); addPair(); }
            });

            clearBtn?.addEventListener('click', function () {
                pairs = [];
                render();
                this.closest('form')?.reset();
            });

            // ---- 7) Init ----
            render();
        })();
    </script>
}